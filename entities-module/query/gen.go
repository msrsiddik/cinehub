// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Actor        *actor
	Address      *address
	Category     *category
	City         *city
	Country      *country
	Customer     *customer
	Film         *film
	FilmActor    *filmActor
	FilmCategory *filmCategory
	Inventory    *inventory
	Language     *language
	Payment      *payment
	Person       *person
	Rental       *rental
	Staff        *staff
	Store        *store
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Actor = &Q.Actor
	Address = &Q.Address
	Category = &Q.Category
	City = &Q.City
	Country = &Q.Country
	Customer = &Q.Customer
	Film = &Q.Film
	FilmActor = &Q.FilmActor
	FilmCategory = &Q.FilmCategory
	Inventory = &Q.Inventory
	Language = &Q.Language
	Payment = &Q.Payment
	Person = &Q.Person
	Rental = &Q.Rental
	Staff = &Q.Staff
	Store = &Q.Store
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Actor:        newActor(db, opts...),
		Address:      newAddress(db, opts...),
		Category:     newCategory(db, opts...),
		City:         newCity(db, opts...),
		Country:      newCountry(db, opts...),
		Customer:     newCustomer(db, opts...),
		Film:         newFilm(db, opts...),
		FilmActor:    newFilmActor(db, opts...),
		FilmCategory: newFilmCategory(db, opts...),
		Inventory:    newInventory(db, opts...),
		Language:     newLanguage(db, opts...),
		Payment:      newPayment(db, opts...),
		Person:       newPerson(db, opts...),
		Rental:       newRental(db, opts...),
		Staff:        newStaff(db, opts...),
		Store:        newStore(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Actor        actor
	Address      address
	Category     category
	City         city
	Country      country
	Customer     customer
	Film         film
	FilmActor    filmActor
	FilmCategory filmCategory
	Inventory    inventory
	Language     language
	Payment      payment
	Person       person
	Rental       rental
	Staff        staff
	Store        store
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Actor:        q.Actor.clone(db),
		Address:      q.Address.clone(db),
		Category:     q.Category.clone(db),
		City:         q.City.clone(db),
		Country:      q.Country.clone(db),
		Customer:     q.Customer.clone(db),
		Film:         q.Film.clone(db),
		FilmActor:    q.FilmActor.clone(db),
		FilmCategory: q.FilmCategory.clone(db),
		Inventory:    q.Inventory.clone(db),
		Language:     q.Language.clone(db),
		Payment:      q.Payment.clone(db),
		Person:       q.Person.clone(db),
		Rental:       q.Rental.clone(db),
		Staff:        q.Staff.clone(db),
		Store:        q.Store.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Actor:        q.Actor.replaceDB(db),
		Address:      q.Address.replaceDB(db),
		Category:     q.Category.replaceDB(db),
		City:         q.City.replaceDB(db),
		Country:      q.Country.replaceDB(db),
		Customer:     q.Customer.replaceDB(db),
		Film:         q.Film.replaceDB(db),
		FilmActor:    q.FilmActor.replaceDB(db),
		FilmCategory: q.FilmCategory.replaceDB(db),
		Inventory:    q.Inventory.replaceDB(db),
		Language:     q.Language.replaceDB(db),
		Payment:      q.Payment.replaceDB(db),
		Person:       q.Person.replaceDB(db),
		Rental:       q.Rental.replaceDB(db),
		Staff:        q.Staff.replaceDB(db),
		Store:        q.Store.replaceDB(db),
	}
}

type queryCtx struct {
	Actor        IActorDo
	Address      IAddressDo
	Category     ICategoryDo
	City         ICityDo
	Country      ICountryDo
	Customer     ICustomerDo
	Film         IFilmDo
	FilmActor    IFilmActorDo
	FilmCategory IFilmCategoryDo
	Inventory    IInventoryDo
	Language     ILanguageDo
	Payment      IPaymentDo
	Person       IPersonDo
	Rental       IRentalDo
	Staff        IStaffDo
	Store        IStoreDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Actor:        q.Actor.WithContext(ctx),
		Address:      q.Address.WithContext(ctx),
		Category:     q.Category.WithContext(ctx),
		City:         q.City.WithContext(ctx),
		Country:      q.Country.WithContext(ctx),
		Customer:     q.Customer.WithContext(ctx),
		Film:         q.Film.WithContext(ctx),
		FilmActor:    q.FilmActor.WithContext(ctx),
		FilmCategory: q.FilmCategory.WithContext(ctx),
		Inventory:    q.Inventory.WithContext(ctx),
		Language:     q.Language.WithContext(ctx),
		Payment:      q.Payment.WithContext(ctx),
		Person:       q.Person.WithContext(ctx),
		Rental:       q.Rental.WithContext(ctx),
		Staff:        q.Staff.WithContext(ctx),
		Store:        q.Store.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
