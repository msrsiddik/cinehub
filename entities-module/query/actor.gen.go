// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"entities-module/model"
)

func newActor(db *gorm.DB, opts ...gen.DOOption) actor {
	_actor := actor{}

	_actor.actorDo.UseDB(db, opts...)
	_actor.actorDo.UseModel(&model.Actor{})

	tableName := _actor.actorDo.TableName()
	_actor.ALL = field.NewAsterisk(tableName)
	_actor.ActorID = field.NewInt32(tableName, "actor_id")
	_actor.FirstName = field.NewString(tableName, "first_name")
	_actor.LastName = field.NewString(tableName, "last_name")
	_actor.LastUpdate = field.NewTime(tableName, "last_update")

	_actor.fillFieldMap()

	return _actor
}

type actor struct {
	actorDo

	ALL        field.Asterisk
	ActorID    field.Int32
	FirstName  field.String
	LastName   field.String
	LastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (a actor) Table(newTableName string) *actor {
	a.actorDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a actor) As(alias string) *actor {
	a.actorDo.DO = *(a.actorDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *actor) updateTableName(table string) *actor {
	a.ALL = field.NewAsterisk(table)
	a.ActorID = field.NewInt32(table, "actor_id")
	a.FirstName = field.NewString(table, "first_name")
	a.LastName = field.NewString(table, "last_name")
	a.LastUpdate = field.NewTime(table, "last_update")

	a.fillFieldMap()

	return a
}

func (a *actor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *actor) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["actor_id"] = a.ActorID
	a.fieldMap["first_name"] = a.FirstName
	a.fieldMap["last_name"] = a.LastName
	a.fieldMap["last_update"] = a.LastUpdate
}

func (a actor) clone(db *gorm.DB) actor {
	a.actorDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a actor) replaceDB(db *gorm.DB) actor {
	a.actorDo.ReplaceDB(db)
	return a
}

type actorDo struct{ gen.DO }

type IActorDo interface {
	gen.SubQuery
	Debug() IActorDo
	WithContext(ctx context.Context) IActorDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActorDo
	WriteDB() IActorDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActorDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActorDo
	Not(conds ...gen.Condition) IActorDo
	Or(conds ...gen.Condition) IActorDo
	Select(conds ...field.Expr) IActorDo
	Where(conds ...gen.Condition) IActorDo
	Order(conds ...field.Expr) IActorDo
	Distinct(cols ...field.Expr) IActorDo
	Omit(cols ...field.Expr) IActorDo
	Join(table schema.Tabler, on ...field.Expr) IActorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActorDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActorDo
	Group(cols ...field.Expr) IActorDo
	Having(conds ...gen.Condition) IActorDo
	Limit(limit int) IActorDo
	Offset(offset int) IActorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActorDo
	Unscoped() IActorDo
	Create(values ...*model.Actor) error
	CreateInBatches(values []*model.Actor, batchSize int) error
	Save(values ...*model.Actor) error
	First() (*model.Actor, error)
	Take() (*model.Actor, error)
	Last() (*model.Actor, error)
	Find() ([]*model.Actor, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Actor, err error)
	FindInBatches(result *[]*model.Actor, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Actor) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActorDo
	Assign(attrs ...field.AssignExpr) IActorDo
	Joins(fields ...field.RelationField) IActorDo
	Preload(fields ...field.RelationField) IActorDo
	FirstOrInit() (*model.Actor, error)
	FirstOrCreate() (*model.Actor, error)
	FindByPage(offset int, limit int) (result []*model.Actor, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a actorDo) Debug() IActorDo {
	return a.withDO(a.DO.Debug())
}

func (a actorDo) WithContext(ctx context.Context) IActorDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a actorDo) ReadDB() IActorDo {
	return a.Clauses(dbresolver.Read)
}

func (a actorDo) WriteDB() IActorDo {
	return a.Clauses(dbresolver.Write)
}

func (a actorDo) Session(config *gorm.Session) IActorDo {
	return a.withDO(a.DO.Session(config))
}

func (a actorDo) Clauses(conds ...clause.Expression) IActorDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a actorDo) Returning(value interface{}, columns ...string) IActorDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a actorDo) Not(conds ...gen.Condition) IActorDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a actorDo) Or(conds ...gen.Condition) IActorDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a actorDo) Select(conds ...field.Expr) IActorDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a actorDo) Where(conds ...gen.Condition) IActorDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a actorDo) Order(conds ...field.Expr) IActorDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a actorDo) Distinct(cols ...field.Expr) IActorDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a actorDo) Omit(cols ...field.Expr) IActorDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a actorDo) Join(table schema.Tabler, on ...field.Expr) IActorDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a actorDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActorDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a actorDo) RightJoin(table schema.Tabler, on ...field.Expr) IActorDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a actorDo) Group(cols ...field.Expr) IActorDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a actorDo) Having(conds ...gen.Condition) IActorDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a actorDo) Limit(limit int) IActorDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a actorDo) Offset(offset int) IActorDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a actorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActorDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a actorDo) Unscoped() IActorDo {
	return a.withDO(a.DO.Unscoped())
}

func (a actorDo) Create(values ...*model.Actor) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a actorDo) CreateInBatches(values []*model.Actor, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a actorDo) Save(values ...*model.Actor) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a actorDo) First() (*model.Actor, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Actor), nil
	}
}

func (a actorDo) Take() (*model.Actor, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Actor), nil
	}
}

func (a actorDo) Last() (*model.Actor, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Actor), nil
	}
}

func (a actorDo) Find() ([]*model.Actor, error) {
	result, err := a.DO.Find()
	return result.([]*model.Actor), err
}

func (a actorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Actor, err error) {
	buf := make([]*model.Actor, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a actorDo) FindInBatches(result *[]*model.Actor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a actorDo) Attrs(attrs ...field.AssignExpr) IActorDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a actorDo) Assign(attrs ...field.AssignExpr) IActorDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a actorDo) Joins(fields ...field.RelationField) IActorDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a actorDo) Preload(fields ...field.RelationField) IActorDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a actorDo) FirstOrInit() (*model.Actor, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Actor), nil
	}
}

func (a actorDo) FirstOrCreate() (*model.Actor, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Actor), nil
	}
}

func (a actorDo) FindByPage(offset int, limit int) (result []*model.Actor, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a actorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a actorDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a actorDo) Delete(models ...*model.Actor) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *actorDo) withDO(do gen.Dao) *actorDo {
	a.DO = *do.(*gen.DO)
	return a
}
