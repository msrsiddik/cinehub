// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"entities-module/model"
)

func newFilmActor(db *gorm.DB, opts ...gen.DOOption) filmActor {
	_filmActor := filmActor{}

	_filmActor.filmActorDo.UseDB(db, opts...)
	_filmActor.filmActorDo.UseModel(&model.FilmActor{})

	tableName := _filmActor.filmActorDo.TableName()
	_filmActor.ALL = field.NewAsterisk(tableName)
	_filmActor.ActorID = field.NewInt16(tableName, "actor_id")
	_filmActor.FilmID = field.NewInt16(tableName, "film_id")
	_filmActor.LastUpdate = field.NewTime(tableName, "last_update")

	_filmActor.fillFieldMap()

	return _filmActor
}

type filmActor struct {
	filmActorDo

	ALL        field.Asterisk
	ActorID    field.Int16
	FilmID     field.Int16
	LastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (f filmActor) Table(newTableName string) *filmActor {
	f.filmActorDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f filmActor) As(alias string) *filmActor {
	f.filmActorDo.DO = *(f.filmActorDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *filmActor) updateTableName(table string) *filmActor {
	f.ALL = field.NewAsterisk(table)
	f.ActorID = field.NewInt16(table, "actor_id")
	f.FilmID = field.NewInt16(table, "film_id")
	f.LastUpdate = field.NewTime(table, "last_update")

	f.fillFieldMap()

	return f
}

func (f *filmActor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *filmActor) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 3)
	f.fieldMap["actor_id"] = f.ActorID
	f.fieldMap["film_id"] = f.FilmID
	f.fieldMap["last_update"] = f.LastUpdate
}

func (f filmActor) clone(db *gorm.DB) filmActor {
	f.filmActorDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f filmActor) replaceDB(db *gorm.DB) filmActor {
	f.filmActorDo.ReplaceDB(db)
	return f
}

type filmActorDo struct{ gen.DO }

type IFilmActorDo interface {
	gen.SubQuery
	Debug() IFilmActorDo
	WithContext(ctx context.Context) IFilmActorDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFilmActorDo
	WriteDB() IFilmActorDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFilmActorDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFilmActorDo
	Not(conds ...gen.Condition) IFilmActorDo
	Or(conds ...gen.Condition) IFilmActorDo
	Select(conds ...field.Expr) IFilmActorDo
	Where(conds ...gen.Condition) IFilmActorDo
	Order(conds ...field.Expr) IFilmActorDo
	Distinct(cols ...field.Expr) IFilmActorDo
	Omit(cols ...field.Expr) IFilmActorDo
	Join(table schema.Tabler, on ...field.Expr) IFilmActorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFilmActorDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFilmActorDo
	Group(cols ...field.Expr) IFilmActorDo
	Having(conds ...gen.Condition) IFilmActorDo
	Limit(limit int) IFilmActorDo
	Offset(offset int) IFilmActorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFilmActorDo
	Unscoped() IFilmActorDo
	Create(values ...*model.FilmActor) error
	CreateInBatches(values []*model.FilmActor, batchSize int) error
	Save(values ...*model.FilmActor) error
	First() (*model.FilmActor, error)
	Take() (*model.FilmActor, error)
	Last() (*model.FilmActor, error)
	Find() ([]*model.FilmActor, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FilmActor, err error)
	FindInBatches(result *[]*model.FilmActor, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FilmActor) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFilmActorDo
	Assign(attrs ...field.AssignExpr) IFilmActorDo
	Joins(fields ...field.RelationField) IFilmActorDo
	Preload(fields ...field.RelationField) IFilmActorDo
	FirstOrInit() (*model.FilmActor, error)
	FirstOrCreate() (*model.FilmActor, error)
	FindByPage(offset int, limit int) (result []*model.FilmActor, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFilmActorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f filmActorDo) Debug() IFilmActorDo {
	return f.withDO(f.DO.Debug())
}

func (f filmActorDo) WithContext(ctx context.Context) IFilmActorDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f filmActorDo) ReadDB() IFilmActorDo {
	return f.Clauses(dbresolver.Read)
}

func (f filmActorDo) WriteDB() IFilmActorDo {
	return f.Clauses(dbresolver.Write)
}

func (f filmActorDo) Session(config *gorm.Session) IFilmActorDo {
	return f.withDO(f.DO.Session(config))
}

func (f filmActorDo) Clauses(conds ...clause.Expression) IFilmActorDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f filmActorDo) Returning(value interface{}, columns ...string) IFilmActorDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f filmActorDo) Not(conds ...gen.Condition) IFilmActorDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f filmActorDo) Or(conds ...gen.Condition) IFilmActorDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f filmActorDo) Select(conds ...field.Expr) IFilmActorDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f filmActorDo) Where(conds ...gen.Condition) IFilmActorDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f filmActorDo) Order(conds ...field.Expr) IFilmActorDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f filmActorDo) Distinct(cols ...field.Expr) IFilmActorDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f filmActorDo) Omit(cols ...field.Expr) IFilmActorDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f filmActorDo) Join(table schema.Tabler, on ...field.Expr) IFilmActorDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f filmActorDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFilmActorDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f filmActorDo) RightJoin(table schema.Tabler, on ...field.Expr) IFilmActorDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f filmActorDo) Group(cols ...field.Expr) IFilmActorDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f filmActorDo) Having(conds ...gen.Condition) IFilmActorDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f filmActorDo) Limit(limit int) IFilmActorDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f filmActorDo) Offset(offset int) IFilmActorDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f filmActorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFilmActorDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f filmActorDo) Unscoped() IFilmActorDo {
	return f.withDO(f.DO.Unscoped())
}

func (f filmActorDo) Create(values ...*model.FilmActor) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f filmActorDo) CreateInBatches(values []*model.FilmActor, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f filmActorDo) Save(values ...*model.FilmActor) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f filmActorDo) First() (*model.FilmActor, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FilmActor), nil
	}
}

func (f filmActorDo) Take() (*model.FilmActor, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FilmActor), nil
	}
}

func (f filmActorDo) Last() (*model.FilmActor, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FilmActor), nil
	}
}

func (f filmActorDo) Find() ([]*model.FilmActor, error) {
	result, err := f.DO.Find()
	return result.([]*model.FilmActor), err
}

func (f filmActorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FilmActor, err error) {
	buf := make([]*model.FilmActor, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f filmActorDo) FindInBatches(result *[]*model.FilmActor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f filmActorDo) Attrs(attrs ...field.AssignExpr) IFilmActorDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f filmActorDo) Assign(attrs ...field.AssignExpr) IFilmActorDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f filmActorDo) Joins(fields ...field.RelationField) IFilmActorDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f filmActorDo) Preload(fields ...field.RelationField) IFilmActorDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f filmActorDo) FirstOrInit() (*model.FilmActor, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FilmActor), nil
	}
}

func (f filmActorDo) FirstOrCreate() (*model.FilmActor, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FilmActor), nil
	}
}

func (f filmActorDo) FindByPage(offset int, limit int) (result []*model.FilmActor, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f filmActorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f filmActorDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f filmActorDo) Delete(models ...*model.FilmActor) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *filmActorDo) withDO(do gen.Dao) *filmActorDo {
	f.DO = *do.(*gen.DO)
	return f
}
