// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"entities-module/model"
)

func newRental(db *gorm.DB, opts ...gen.DOOption) rental {
	_rental := rental{}

	_rental.rentalDo.UseDB(db, opts...)
	_rental.rentalDo.UseModel(&model.Rental{})

	tableName := _rental.rentalDo.TableName()
	_rental.ALL = field.NewAsterisk(tableName)
	_rental.RentalID = field.NewInt32(tableName, "rental_id")
	_rental.RentalDate = field.NewTime(tableName, "rental_date")
	_rental.InventoryID = field.NewInt32(tableName, "inventory_id")
	_rental.CustomerID = field.NewInt16(tableName, "customer_id")
	_rental.ReturnDate = field.NewTime(tableName, "return_date")
	_rental.StaffID = field.NewInt16(tableName, "staff_id")
	_rental.LastUpdate = field.NewTime(tableName, "last_update")

	_rental.fillFieldMap()

	return _rental
}

type rental struct {
	rentalDo

	ALL         field.Asterisk
	RentalID    field.Int32
	RentalDate  field.Time
	InventoryID field.Int32
	CustomerID  field.Int16
	ReturnDate  field.Time
	StaffID     field.Int16
	LastUpdate  field.Time

	fieldMap map[string]field.Expr
}

func (r rental) Table(newTableName string) *rental {
	r.rentalDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rental) As(alias string) *rental {
	r.rentalDo.DO = *(r.rentalDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rental) updateTableName(table string) *rental {
	r.ALL = field.NewAsterisk(table)
	r.RentalID = field.NewInt32(table, "rental_id")
	r.RentalDate = field.NewTime(table, "rental_date")
	r.InventoryID = field.NewInt32(table, "inventory_id")
	r.CustomerID = field.NewInt16(table, "customer_id")
	r.ReturnDate = field.NewTime(table, "return_date")
	r.StaffID = field.NewInt16(table, "staff_id")
	r.LastUpdate = field.NewTime(table, "last_update")

	r.fillFieldMap()

	return r
}

func (r *rental) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rental) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["rental_id"] = r.RentalID
	r.fieldMap["rental_date"] = r.RentalDate
	r.fieldMap["inventory_id"] = r.InventoryID
	r.fieldMap["customer_id"] = r.CustomerID
	r.fieldMap["return_date"] = r.ReturnDate
	r.fieldMap["staff_id"] = r.StaffID
	r.fieldMap["last_update"] = r.LastUpdate
}

func (r rental) clone(db *gorm.DB) rental {
	r.rentalDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rental) replaceDB(db *gorm.DB) rental {
	r.rentalDo.ReplaceDB(db)
	return r
}

type rentalDo struct{ gen.DO }

type IRentalDo interface {
	gen.SubQuery
	Debug() IRentalDo
	WithContext(ctx context.Context) IRentalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRentalDo
	WriteDB() IRentalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRentalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRentalDo
	Not(conds ...gen.Condition) IRentalDo
	Or(conds ...gen.Condition) IRentalDo
	Select(conds ...field.Expr) IRentalDo
	Where(conds ...gen.Condition) IRentalDo
	Order(conds ...field.Expr) IRentalDo
	Distinct(cols ...field.Expr) IRentalDo
	Omit(cols ...field.Expr) IRentalDo
	Join(table schema.Tabler, on ...field.Expr) IRentalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRentalDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRentalDo
	Group(cols ...field.Expr) IRentalDo
	Having(conds ...gen.Condition) IRentalDo
	Limit(limit int) IRentalDo
	Offset(offset int) IRentalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRentalDo
	Unscoped() IRentalDo
	Create(values ...*model.Rental) error
	CreateInBatches(values []*model.Rental, batchSize int) error
	Save(values ...*model.Rental) error
	First() (*model.Rental, error)
	Take() (*model.Rental, error)
	Last() (*model.Rental, error)
	Find() ([]*model.Rental, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Rental, err error)
	FindInBatches(result *[]*model.Rental, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Rental) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRentalDo
	Assign(attrs ...field.AssignExpr) IRentalDo
	Joins(fields ...field.RelationField) IRentalDo
	Preload(fields ...field.RelationField) IRentalDo
	FirstOrInit() (*model.Rental, error)
	FirstOrCreate() (*model.Rental, error)
	FindByPage(offset int, limit int) (result []*model.Rental, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRentalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rentalDo) Debug() IRentalDo {
	return r.withDO(r.DO.Debug())
}

func (r rentalDo) WithContext(ctx context.Context) IRentalDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rentalDo) ReadDB() IRentalDo {
	return r.Clauses(dbresolver.Read)
}

func (r rentalDo) WriteDB() IRentalDo {
	return r.Clauses(dbresolver.Write)
}

func (r rentalDo) Session(config *gorm.Session) IRentalDo {
	return r.withDO(r.DO.Session(config))
}

func (r rentalDo) Clauses(conds ...clause.Expression) IRentalDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rentalDo) Returning(value interface{}, columns ...string) IRentalDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rentalDo) Not(conds ...gen.Condition) IRentalDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rentalDo) Or(conds ...gen.Condition) IRentalDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rentalDo) Select(conds ...field.Expr) IRentalDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rentalDo) Where(conds ...gen.Condition) IRentalDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rentalDo) Order(conds ...field.Expr) IRentalDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rentalDo) Distinct(cols ...field.Expr) IRentalDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rentalDo) Omit(cols ...field.Expr) IRentalDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rentalDo) Join(table schema.Tabler, on ...field.Expr) IRentalDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rentalDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRentalDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rentalDo) RightJoin(table schema.Tabler, on ...field.Expr) IRentalDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rentalDo) Group(cols ...field.Expr) IRentalDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rentalDo) Having(conds ...gen.Condition) IRentalDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rentalDo) Limit(limit int) IRentalDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rentalDo) Offset(offset int) IRentalDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rentalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRentalDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rentalDo) Unscoped() IRentalDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rentalDo) Create(values ...*model.Rental) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rentalDo) CreateInBatches(values []*model.Rental, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rentalDo) Save(values ...*model.Rental) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rentalDo) First() (*model.Rental, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rental), nil
	}
}

func (r rentalDo) Take() (*model.Rental, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rental), nil
	}
}

func (r rentalDo) Last() (*model.Rental, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rental), nil
	}
}

func (r rentalDo) Find() ([]*model.Rental, error) {
	result, err := r.DO.Find()
	return result.([]*model.Rental), err
}

func (r rentalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Rental, err error) {
	buf := make([]*model.Rental, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rentalDo) FindInBatches(result *[]*model.Rental, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rentalDo) Attrs(attrs ...field.AssignExpr) IRentalDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rentalDo) Assign(attrs ...field.AssignExpr) IRentalDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rentalDo) Joins(fields ...field.RelationField) IRentalDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rentalDo) Preload(fields ...field.RelationField) IRentalDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rentalDo) FirstOrInit() (*model.Rental, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rental), nil
	}
}

func (r rentalDo) FirstOrCreate() (*model.Rental, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rental), nil
	}
}

func (r rentalDo) FindByPage(offset int, limit int) (result []*model.Rental, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rentalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rentalDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rentalDo) Delete(models ...*model.Rental) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rentalDo) withDO(do gen.Dao) *rentalDo {
	r.DO = *do.(*gen.DO)
	return r
}
