// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"entities-module/model"
)

func newFilmCategory(db *gorm.DB, opts ...gen.DOOption) filmCategory {
	_filmCategory := filmCategory{}

	_filmCategory.filmCategoryDo.UseDB(db, opts...)
	_filmCategory.filmCategoryDo.UseModel(&model.FilmCategory{})

	tableName := _filmCategory.filmCategoryDo.TableName()
	_filmCategory.ALL = field.NewAsterisk(tableName)
	_filmCategory.FilmID = field.NewInt16(tableName, "film_id")
	_filmCategory.CategoryID = field.NewInt16(tableName, "category_id")
	_filmCategory.LastUpdate = field.NewTime(tableName, "last_update")

	_filmCategory.fillFieldMap()

	return _filmCategory
}

type filmCategory struct {
	filmCategoryDo

	ALL        field.Asterisk
	FilmID     field.Int16
	CategoryID field.Int16
	LastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (f filmCategory) Table(newTableName string) *filmCategory {
	f.filmCategoryDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f filmCategory) As(alias string) *filmCategory {
	f.filmCategoryDo.DO = *(f.filmCategoryDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *filmCategory) updateTableName(table string) *filmCategory {
	f.ALL = field.NewAsterisk(table)
	f.FilmID = field.NewInt16(table, "film_id")
	f.CategoryID = field.NewInt16(table, "category_id")
	f.LastUpdate = field.NewTime(table, "last_update")

	f.fillFieldMap()

	return f
}

func (f *filmCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *filmCategory) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 3)
	f.fieldMap["film_id"] = f.FilmID
	f.fieldMap["category_id"] = f.CategoryID
	f.fieldMap["last_update"] = f.LastUpdate
}

func (f filmCategory) clone(db *gorm.DB) filmCategory {
	f.filmCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f filmCategory) replaceDB(db *gorm.DB) filmCategory {
	f.filmCategoryDo.ReplaceDB(db)
	return f
}

type filmCategoryDo struct{ gen.DO }

type IFilmCategoryDo interface {
	gen.SubQuery
	Debug() IFilmCategoryDo
	WithContext(ctx context.Context) IFilmCategoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFilmCategoryDo
	WriteDB() IFilmCategoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFilmCategoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFilmCategoryDo
	Not(conds ...gen.Condition) IFilmCategoryDo
	Or(conds ...gen.Condition) IFilmCategoryDo
	Select(conds ...field.Expr) IFilmCategoryDo
	Where(conds ...gen.Condition) IFilmCategoryDo
	Order(conds ...field.Expr) IFilmCategoryDo
	Distinct(cols ...field.Expr) IFilmCategoryDo
	Omit(cols ...field.Expr) IFilmCategoryDo
	Join(table schema.Tabler, on ...field.Expr) IFilmCategoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFilmCategoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFilmCategoryDo
	Group(cols ...field.Expr) IFilmCategoryDo
	Having(conds ...gen.Condition) IFilmCategoryDo
	Limit(limit int) IFilmCategoryDo
	Offset(offset int) IFilmCategoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFilmCategoryDo
	Unscoped() IFilmCategoryDo
	Create(values ...*model.FilmCategory) error
	CreateInBatches(values []*model.FilmCategory, batchSize int) error
	Save(values ...*model.FilmCategory) error
	First() (*model.FilmCategory, error)
	Take() (*model.FilmCategory, error)
	Last() (*model.FilmCategory, error)
	Find() ([]*model.FilmCategory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FilmCategory, err error)
	FindInBatches(result *[]*model.FilmCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FilmCategory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFilmCategoryDo
	Assign(attrs ...field.AssignExpr) IFilmCategoryDo
	Joins(fields ...field.RelationField) IFilmCategoryDo
	Preload(fields ...field.RelationField) IFilmCategoryDo
	FirstOrInit() (*model.FilmCategory, error)
	FirstOrCreate() (*model.FilmCategory, error)
	FindByPage(offset int, limit int) (result []*model.FilmCategory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFilmCategoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f filmCategoryDo) Debug() IFilmCategoryDo {
	return f.withDO(f.DO.Debug())
}

func (f filmCategoryDo) WithContext(ctx context.Context) IFilmCategoryDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f filmCategoryDo) ReadDB() IFilmCategoryDo {
	return f.Clauses(dbresolver.Read)
}

func (f filmCategoryDo) WriteDB() IFilmCategoryDo {
	return f.Clauses(dbresolver.Write)
}

func (f filmCategoryDo) Session(config *gorm.Session) IFilmCategoryDo {
	return f.withDO(f.DO.Session(config))
}

func (f filmCategoryDo) Clauses(conds ...clause.Expression) IFilmCategoryDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f filmCategoryDo) Returning(value interface{}, columns ...string) IFilmCategoryDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f filmCategoryDo) Not(conds ...gen.Condition) IFilmCategoryDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f filmCategoryDo) Or(conds ...gen.Condition) IFilmCategoryDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f filmCategoryDo) Select(conds ...field.Expr) IFilmCategoryDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f filmCategoryDo) Where(conds ...gen.Condition) IFilmCategoryDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f filmCategoryDo) Order(conds ...field.Expr) IFilmCategoryDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f filmCategoryDo) Distinct(cols ...field.Expr) IFilmCategoryDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f filmCategoryDo) Omit(cols ...field.Expr) IFilmCategoryDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f filmCategoryDo) Join(table schema.Tabler, on ...field.Expr) IFilmCategoryDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f filmCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFilmCategoryDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f filmCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IFilmCategoryDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f filmCategoryDo) Group(cols ...field.Expr) IFilmCategoryDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f filmCategoryDo) Having(conds ...gen.Condition) IFilmCategoryDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f filmCategoryDo) Limit(limit int) IFilmCategoryDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f filmCategoryDo) Offset(offset int) IFilmCategoryDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f filmCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFilmCategoryDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f filmCategoryDo) Unscoped() IFilmCategoryDo {
	return f.withDO(f.DO.Unscoped())
}

func (f filmCategoryDo) Create(values ...*model.FilmCategory) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f filmCategoryDo) CreateInBatches(values []*model.FilmCategory, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f filmCategoryDo) Save(values ...*model.FilmCategory) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f filmCategoryDo) First() (*model.FilmCategory, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FilmCategory), nil
	}
}

func (f filmCategoryDo) Take() (*model.FilmCategory, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FilmCategory), nil
	}
}

func (f filmCategoryDo) Last() (*model.FilmCategory, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FilmCategory), nil
	}
}

func (f filmCategoryDo) Find() ([]*model.FilmCategory, error) {
	result, err := f.DO.Find()
	return result.([]*model.FilmCategory), err
}

func (f filmCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FilmCategory, err error) {
	buf := make([]*model.FilmCategory, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f filmCategoryDo) FindInBatches(result *[]*model.FilmCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f filmCategoryDo) Attrs(attrs ...field.AssignExpr) IFilmCategoryDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f filmCategoryDo) Assign(attrs ...field.AssignExpr) IFilmCategoryDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f filmCategoryDo) Joins(fields ...field.RelationField) IFilmCategoryDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f filmCategoryDo) Preload(fields ...field.RelationField) IFilmCategoryDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f filmCategoryDo) FirstOrInit() (*model.FilmCategory, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FilmCategory), nil
	}
}

func (f filmCategoryDo) FirstOrCreate() (*model.FilmCategory, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FilmCategory), nil
	}
}

func (f filmCategoryDo) FindByPage(offset int, limit int) (result []*model.FilmCategory, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f filmCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f filmCategoryDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f filmCategoryDo) Delete(models ...*model.FilmCategory) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *filmCategoryDo) withDO(do gen.Dao) *filmCategoryDo {
	f.DO = *do.(*gen.DO)
	return f
}
