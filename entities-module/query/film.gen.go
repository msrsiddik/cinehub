// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"entities-module/model"
)

func newFilm(db *gorm.DB, opts ...gen.DOOption) film {
	_film := film{}

	_film.filmDo.UseDB(db, opts...)
	_film.filmDo.UseModel(&model.Film{})

	tableName := _film.filmDo.TableName()
	_film.ALL = field.NewAsterisk(tableName)
	_film.FilmID = field.NewInt32(tableName, "film_id")
	_film.Title = field.NewString(tableName, "title")
	_film.Description = field.NewString(tableName, "description")
	_film.ReleaseYear = field.NewInt32(tableName, "release_year")
	_film.LanguageID = field.NewInt16(tableName, "language_id")
	_film.RentalDuration = field.NewInt16(tableName, "rental_duration")
	_film.RentalRate = field.NewFloat64(tableName, "rental_rate")
	_film.Length = field.NewInt16(tableName, "length")
	_film.ReplacementCost = field.NewFloat64(tableName, "replacement_cost")
	_film.Rating = field.NewString(tableName, "rating")
	_film.LastUpdate = field.NewTime(tableName, "last_update")
	_film.SpecialFeatures = field.NewString(tableName, "special_features")
	_film.Fulltext = field.NewString(tableName, "fulltext")

	_film.fillFieldMap()

	return _film
}

type film struct {
	filmDo

	ALL             field.Asterisk
	FilmID          field.Int32
	Title           field.String
	Description     field.String
	ReleaseYear     field.Int32
	LanguageID      field.Int16
	RentalDuration  field.Int16
	RentalRate      field.Float64
	Length          field.Int16
	ReplacementCost field.Float64
	Rating          field.String
	LastUpdate      field.Time
	SpecialFeatures field.String
	Fulltext        field.String

	fieldMap map[string]field.Expr
}

func (f film) Table(newTableName string) *film {
	f.filmDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f film) As(alias string) *film {
	f.filmDo.DO = *(f.filmDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *film) updateTableName(table string) *film {
	f.ALL = field.NewAsterisk(table)
	f.FilmID = field.NewInt32(table, "film_id")
	f.Title = field.NewString(table, "title")
	f.Description = field.NewString(table, "description")
	f.ReleaseYear = field.NewInt32(table, "release_year")
	f.LanguageID = field.NewInt16(table, "language_id")
	f.RentalDuration = field.NewInt16(table, "rental_duration")
	f.RentalRate = field.NewFloat64(table, "rental_rate")
	f.Length = field.NewInt16(table, "length")
	f.ReplacementCost = field.NewFloat64(table, "replacement_cost")
	f.Rating = field.NewString(table, "rating")
	f.LastUpdate = field.NewTime(table, "last_update")
	f.SpecialFeatures = field.NewString(table, "special_features")
	f.Fulltext = field.NewString(table, "fulltext")

	f.fillFieldMap()

	return f
}

func (f *film) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *film) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 13)
	f.fieldMap["film_id"] = f.FilmID
	f.fieldMap["title"] = f.Title
	f.fieldMap["description"] = f.Description
	f.fieldMap["release_year"] = f.ReleaseYear
	f.fieldMap["language_id"] = f.LanguageID
	f.fieldMap["rental_duration"] = f.RentalDuration
	f.fieldMap["rental_rate"] = f.RentalRate
	f.fieldMap["length"] = f.Length
	f.fieldMap["replacement_cost"] = f.ReplacementCost
	f.fieldMap["rating"] = f.Rating
	f.fieldMap["last_update"] = f.LastUpdate
	f.fieldMap["special_features"] = f.SpecialFeatures
	f.fieldMap["fulltext"] = f.Fulltext
}

func (f film) clone(db *gorm.DB) film {
	f.filmDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f film) replaceDB(db *gorm.DB) film {
	f.filmDo.ReplaceDB(db)
	return f
}

type filmDo struct{ gen.DO }

type IFilmDo interface {
	gen.SubQuery
	Debug() IFilmDo
	WithContext(ctx context.Context) IFilmDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFilmDo
	WriteDB() IFilmDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFilmDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFilmDo
	Not(conds ...gen.Condition) IFilmDo
	Or(conds ...gen.Condition) IFilmDo
	Select(conds ...field.Expr) IFilmDo
	Where(conds ...gen.Condition) IFilmDo
	Order(conds ...field.Expr) IFilmDo
	Distinct(cols ...field.Expr) IFilmDo
	Omit(cols ...field.Expr) IFilmDo
	Join(table schema.Tabler, on ...field.Expr) IFilmDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFilmDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFilmDo
	Group(cols ...field.Expr) IFilmDo
	Having(conds ...gen.Condition) IFilmDo
	Limit(limit int) IFilmDo
	Offset(offset int) IFilmDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFilmDo
	Unscoped() IFilmDo
	Create(values ...*model.Film) error
	CreateInBatches(values []*model.Film, batchSize int) error
	Save(values ...*model.Film) error
	First() (*model.Film, error)
	Take() (*model.Film, error)
	Last() (*model.Film, error)
	Find() ([]*model.Film, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Film, err error)
	FindInBatches(result *[]*model.Film, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Film) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFilmDo
	Assign(attrs ...field.AssignExpr) IFilmDo
	Joins(fields ...field.RelationField) IFilmDo
	Preload(fields ...field.RelationField) IFilmDo
	FirstOrInit() (*model.Film, error)
	FirstOrCreate() (*model.Film, error)
	FindByPage(offset int, limit int) (result []*model.Film, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFilmDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f filmDo) Debug() IFilmDo {
	return f.withDO(f.DO.Debug())
}

func (f filmDo) WithContext(ctx context.Context) IFilmDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f filmDo) ReadDB() IFilmDo {
	return f.Clauses(dbresolver.Read)
}

func (f filmDo) WriteDB() IFilmDo {
	return f.Clauses(dbresolver.Write)
}

func (f filmDo) Session(config *gorm.Session) IFilmDo {
	return f.withDO(f.DO.Session(config))
}

func (f filmDo) Clauses(conds ...clause.Expression) IFilmDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f filmDo) Returning(value interface{}, columns ...string) IFilmDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f filmDo) Not(conds ...gen.Condition) IFilmDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f filmDo) Or(conds ...gen.Condition) IFilmDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f filmDo) Select(conds ...field.Expr) IFilmDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f filmDo) Where(conds ...gen.Condition) IFilmDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f filmDo) Order(conds ...field.Expr) IFilmDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f filmDo) Distinct(cols ...field.Expr) IFilmDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f filmDo) Omit(cols ...field.Expr) IFilmDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f filmDo) Join(table schema.Tabler, on ...field.Expr) IFilmDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f filmDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFilmDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f filmDo) RightJoin(table schema.Tabler, on ...field.Expr) IFilmDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f filmDo) Group(cols ...field.Expr) IFilmDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f filmDo) Having(conds ...gen.Condition) IFilmDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f filmDo) Limit(limit int) IFilmDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f filmDo) Offset(offset int) IFilmDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f filmDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFilmDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f filmDo) Unscoped() IFilmDo {
	return f.withDO(f.DO.Unscoped())
}

func (f filmDo) Create(values ...*model.Film) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f filmDo) CreateInBatches(values []*model.Film, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f filmDo) Save(values ...*model.Film) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f filmDo) First() (*model.Film, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Film), nil
	}
}

func (f filmDo) Take() (*model.Film, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Film), nil
	}
}

func (f filmDo) Last() (*model.Film, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Film), nil
	}
}

func (f filmDo) Find() ([]*model.Film, error) {
	result, err := f.DO.Find()
	return result.([]*model.Film), err
}

func (f filmDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Film, err error) {
	buf := make([]*model.Film, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f filmDo) FindInBatches(result *[]*model.Film, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f filmDo) Attrs(attrs ...field.AssignExpr) IFilmDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f filmDo) Assign(attrs ...field.AssignExpr) IFilmDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f filmDo) Joins(fields ...field.RelationField) IFilmDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f filmDo) Preload(fields ...field.RelationField) IFilmDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f filmDo) FirstOrInit() (*model.Film, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Film), nil
	}
}

func (f filmDo) FirstOrCreate() (*model.Film, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Film), nil
	}
}

func (f filmDo) FindByPage(offset int, limit int) (result []*model.Film, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f filmDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f filmDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f filmDo) Delete(models ...*model.Film) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *filmDo) withDO(do gen.Dao) *filmDo {
	f.DO = *do.(*gen.DO)
	return f
}
