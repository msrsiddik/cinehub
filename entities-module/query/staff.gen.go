// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"entities-module/model"
)

func newStaff(db *gorm.DB, opts ...gen.DOOption) staff {
	_staff := staff{}

	_staff.staffDo.UseDB(db, opts...)
	_staff.staffDo.UseModel(&model.Staff{})

	tableName := _staff.staffDo.TableName()
	_staff.ALL = field.NewAsterisk(tableName)
	_staff.StaffID = field.NewInt32(tableName, "staff_id")
	_staff.FirstName = field.NewString(tableName, "first_name")
	_staff.LastName = field.NewString(tableName, "last_name")
	_staff.AddressID = field.NewInt16(tableName, "address_id")
	_staff.Email = field.NewString(tableName, "email")
	_staff.StoreID = field.NewInt16(tableName, "store_id")
	_staff.Active = field.NewBool(tableName, "active")
	_staff.Username = field.NewString(tableName, "username")
	_staff.Password = field.NewString(tableName, "password")
	_staff.LastUpdate = field.NewTime(tableName, "last_update")
	_staff.Picture = field.NewField(tableName, "picture")

	_staff.fillFieldMap()

	return _staff
}

type staff struct {
	staffDo

	ALL        field.Asterisk
	StaffID    field.Int32
	FirstName  field.String
	LastName   field.String
	AddressID  field.Int16
	Email      field.String
	StoreID    field.Int16
	Active     field.Bool
	Username   field.String
	Password   field.String
	LastUpdate field.Time
	Picture    field.Field

	fieldMap map[string]field.Expr
}

func (s staff) Table(newTableName string) *staff {
	s.staffDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s staff) As(alias string) *staff {
	s.staffDo.DO = *(s.staffDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *staff) updateTableName(table string) *staff {
	s.ALL = field.NewAsterisk(table)
	s.StaffID = field.NewInt32(table, "staff_id")
	s.FirstName = field.NewString(table, "first_name")
	s.LastName = field.NewString(table, "last_name")
	s.AddressID = field.NewInt16(table, "address_id")
	s.Email = field.NewString(table, "email")
	s.StoreID = field.NewInt16(table, "store_id")
	s.Active = field.NewBool(table, "active")
	s.Username = field.NewString(table, "username")
	s.Password = field.NewString(table, "password")
	s.LastUpdate = field.NewTime(table, "last_update")
	s.Picture = field.NewField(table, "picture")

	s.fillFieldMap()

	return s
}

func (s *staff) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *staff) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["staff_id"] = s.StaffID
	s.fieldMap["first_name"] = s.FirstName
	s.fieldMap["last_name"] = s.LastName
	s.fieldMap["address_id"] = s.AddressID
	s.fieldMap["email"] = s.Email
	s.fieldMap["store_id"] = s.StoreID
	s.fieldMap["active"] = s.Active
	s.fieldMap["username"] = s.Username
	s.fieldMap["password"] = s.Password
	s.fieldMap["last_update"] = s.LastUpdate
	s.fieldMap["picture"] = s.Picture
}

func (s staff) clone(db *gorm.DB) staff {
	s.staffDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s staff) replaceDB(db *gorm.DB) staff {
	s.staffDo.ReplaceDB(db)
	return s
}

type staffDo struct{ gen.DO }

type IStaffDo interface {
	gen.SubQuery
	Debug() IStaffDo
	WithContext(ctx context.Context) IStaffDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStaffDo
	WriteDB() IStaffDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStaffDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStaffDo
	Not(conds ...gen.Condition) IStaffDo
	Or(conds ...gen.Condition) IStaffDo
	Select(conds ...field.Expr) IStaffDo
	Where(conds ...gen.Condition) IStaffDo
	Order(conds ...field.Expr) IStaffDo
	Distinct(cols ...field.Expr) IStaffDo
	Omit(cols ...field.Expr) IStaffDo
	Join(table schema.Tabler, on ...field.Expr) IStaffDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStaffDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStaffDo
	Group(cols ...field.Expr) IStaffDo
	Having(conds ...gen.Condition) IStaffDo
	Limit(limit int) IStaffDo
	Offset(offset int) IStaffDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStaffDo
	Unscoped() IStaffDo
	Create(values ...*model.Staff) error
	CreateInBatches(values []*model.Staff, batchSize int) error
	Save(values ...*model.Staff) error
	First() (*model.Staff, error)
	Take() (*model.Staff, error)
	Last() (*model.Staff, error)
	Find() ([]*model.Staff, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Staff, err error)
	FindInBatches(result *[]*model.Staff, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Staff) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStaffDo
	Assign(attrs ...field.AssignExpr) IStaffDo
	Joins(fields ...field.RelationField) IStaffDo
	Preload(fields ...field.RelationField) IStaffDo
	FirstOrInit() (*model.Staff, error)
	FirstOrCreate() (*model.Staff, error)
	FindByPage(offset int, limit int) (result []*model.Staff, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStaffDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s staffDo) Debug() IStaffDo {
	return s.withDO(s.DO.Debug())
}

func (s staffDo) WithContext(ctx context.Context) IStaffDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s staffDo) ReadDB() IStaffDo {
	return s.Clauses(dbresolver.Read)
}

func (s staffDo) WriteDB() IStaffDo {
	return s.Clauses(dbresolver.Write)
}

func (s staffDo) Session(config *gorm.Session) IStaffDo {
	return s.withDO(s.DO.Session(config))
}

func (s staffDo) Clauses(conds ...clause.Expression) IStaffDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s staffDo) Returning(value interface{}, columns ...string) IStaffDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s staffDo) Not(conds ...gen.Condition) IStaffDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s staffDo) Or(conds ...gen.Condition) IStaffDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s staffDo) Select(conds ...field.Expr) IStaffDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s staffDo) Where(conds ...gen.Condition) IStaffDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s staffDo) Order(conds ...field.Expr) IStaffDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s staffDo) Distinct(cols ...field.Expr) IStaffDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s staffDo) Omit(cols ...field.Expr) IStaffDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s staffDo) Join(table schema.Tabler, on ...field.Expr) IStaffDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s staffDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStaffDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s staffDo) RightJoin(table schema.Tabler, on ...field.Expr) IStaffDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s staffDo) Group(cols ...field.Expr) IStaffDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s staffDo) Having(conds ...gen.Condition) IStaffDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s staffDo) Limit(limit int) IStaffDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s staffDo) Offset(offset int) IStaffDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s staffDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStaffDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s staffDo) Unscoped() IStaffDo {
	return s.withDO(s.DO.Unscoped())
}

func (s staffDo) Create(values ...*model.Staff) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s staffDo) CreateInBatches(values []*model.Staff, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s staffDo) Save(values ...*model.Staff) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s staffDo) First() (*model.Staff, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Staff), nil
	}
}

func (s staffDo) Take() (*model.Staff, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Staff), nil
	}
}

func (s staffDo) Last() (*model.Staff, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Staff), nil
	}
}

func (s staffDo) Find() ([]*model.Staff, error) {
	result, err := s.DO.Find()
	return result.([]*model.Staff), err
}

func (s staffDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Staff, err error) {
	buf := make([]*model.Staff, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s staffDo) FindInBatches(result *[]*model.Staff, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s staffDo) Attrs(attrs ...field.AssignExpr) IStaffDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s staffDo) Assign(attrs ...field.AssignExpr) IStaffDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s staffDo) Joins(fields ...field.RelationField) IStaffDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s staffDo) Preload(fields ...field.RelationField) IStaffDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s staffDo) FirstOrInit() (*model.Staff, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Staff), nil
	}
}

func (s staffDo) FirstOrCreate() (*model.Staff, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Staff), nil
	}
}

func (s staffDo) FindByPage(offset int, limit int) (result []*model.Staff, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s staffDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s staffDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s staffDo) Delete(models ...*model.Staff) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *staffDo) withDO(do gen.Dao) *staffDo {
	s.DO = *do.(*gen.DO)
	return s
}
