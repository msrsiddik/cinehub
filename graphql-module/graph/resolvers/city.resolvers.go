package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"entities-module/model"
	"fmt"
	"graphql-module/graph/generated"
	"strconv"
)

// CountryID is the resolver for the country_id field.
func (r *cityResolver) CountryID(ctx context.Context, obj *model.City) (*string, error) {
	qCity := r.Q.City
	city, err := qCity.WithContext(ctx).Where(qCity.CityID.Eq(obj.CityID)).First()
	if err != nil {
		return nil, nil
	}
	countryID := strconv.Itoa(int(city.CountryID))
	return &countryID, nil
}

// City is the resolver for the city field.
func (r *queryResolver) City(ctx context.Context, cityID string) (*model.City, error) {
	if cityID == "" {
		return nil, fmt.Errorf("cityID cannot be empty")
	}
	// Convert cityID to int
	id, err := strconv.Atoi(cityID)
	if err != nil {
		return nil, fmt.Errorf("invalid city ID %s: %w", cityID, err)
	}
	qCity := r.Q.City
	city, err := qCity.WithContext(ctx).Where(qCity.CityID.Eq(int32(id))).First()
	if err != nil {
		return nil, fmt.Errorf("failed to find city with ID %s: %w", cityID, err)
	}
	return city, nil
}

// City returns generated.CityResolver implementation.
func (r *Resolver) City() generated.CityResolver { return &cityResolver{r} }

type cityResolver struct{ *Resolver }
