package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"entities-module/model"
	"fmt"
	"graphql-module/graph/generated"
	"strconv"
)

// CityID is the resolver for the city_id field.
func (r *addressResolver) CityID(ctx context.Context, obj *model.Address) (*string, error) {
	cityID := strconv.Itoa(int(obj.CityID))
	return &cityID, nil
}

// Address is the resolver for the address field.
func (r *queryResolver) Address(ctx context.Context, addressID string) (*model.Address, error) {
	if addressID == "" {
		return nil, fmt.Errorf("addressID cannot be empty")
	}
	// Convert addressID to an integer
	id, err := strconv.Atoi(addressID)
	if err != nil {
		return nil, fmt.Errorf("invalid address ID %s: %w", addressID, err)
	}
	qAddress := r.Q.Address
	address, err := qAddress.WithContext(ctx).Where(qAddress.AddressID.Eq(int32(id))).First()
	if err != nil {
		return nil, fmt.Errorf("failed to find address with ID %s: %w", addressID, err)
	}
	return address, nil
}

// Addresses is the resolver for the addresses field.
func (r *queryResolver) Addresses(ctx context.Context) ([]*model.Address, error) {
	qAddress := r.Q.Address.WithContext(ctx)
	return qAddress.Find()
}

// Address returns generated.AddressResolver implementation.
func (r *Resolver) Address() generated.AddressResolver { return &addressResolver{r} }

type addressResolver struct{ *Resolver }
